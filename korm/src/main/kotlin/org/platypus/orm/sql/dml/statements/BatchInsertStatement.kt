package org.platypus.orm.sql.dml.statements

import org.platypus.PlatypusEnvironment
import org.platypus.model.Model
import org.platypus.model.field.api.IModelField
import org.platypus.orm.sql.dml.DefaultValueMarker
import java.sql.ResultSet
import java.util.*

internal class BatchDataInconsistentException(message: String) : Exception(message)

open class BatchInsertStatement(env: PlatypusEnvironment, table: Model<*>, ignore: Boolean = false) : InsertStatement<List<Map<IModelField<*, *>, Any>>>(env, table, ignore) {

    override val flushCache: Boolean = false

    override val isAlwaysBatch = true

    val data = ArrayList<MutableMap<IModelField<*, *>, Any?>>()

    private fun IModelField<*, *>.isDefaultable() = required || defaultValueFun(env) != null

    override operator fun <S : Any> set(column: IModelField<*,  S>, value: S) {
        if (data.size > 1 && column !in data[data.size - 2] && !column.isDefaultable()) {
            throw BatchDataInconsistentException("Can't fieldSet $value for ${column.completeName} because previous insertion can't be defaulted for that column.")
        }
        super.set(column, value)
    }

    fun addBatch() {
        if (data.isNotEmpty()) {
            validateLastBatch()
            data[data.size - 1] = LinkedHashMap(values)
            values.clear()
        }
        data.add(values)
        arguments = null
    }

    internal open fun validateLastBatch() {
        val cantBeDefaulted = (data.last().keys - values.keys).filterNot { it.isDefaultable() }
        if (cantBeDefaulted.isNotEmpty()) {
            val columnList = cantBeDefaulted.joinToString { it.completeName }
            throw BatchDataInconsistentException("Can't add new batch because fields: $columnList don't have client default values. DB defaults don't support in batch inserts")
        }
        val requiredInTargets = (targets.flatMap { it.fields } - values.keys).filter { !it.isDefaultable() && !it.type.isAutoInc }
        if (requiredInTargets.any()) {
            throw BatchDataInconsistentException("Can't add new batch because fields: ${requiredInTargets.joinToString()} don't have client default values. DB defaults don't support in batch inserts")
        }
    }

    private fun allColumnsInDataSet() = data.fold(setOf<IModelField<*,*>>()) { columns, row ->
        columns + row.keys
    }

    override fun valuesAndDefaults(values: Map<IModelField<*,*>, Any?>) = arguments!!.first().toMap()

    override fun arguments() = arguments!!.map { it.map { it.first.type to it.second }.filter { it.second != DefaultValueMarker } }

    override fun generatedKeyFun(rs: ResultSet?, inserted: Int): List<Map<IModelField<*, *>, Any>>? {
        val autoGeneratedKeys = arrayListOf<MutableMap<IModelField<*, *>, Any>>()

        val firstAutoIncColumn = autoIncColumns.firstOrNull()
        if (firstAutoIncColumn != null) {
            while (rs?.next() == true) {
                autoGeneratedKeys.add(hashMapOf(firstAutoIncColumn to rs.getObject(1)))
            }

            if (inserted > 1 && !dialect.supportsMultipleGeneratedKeys) {
                // H2/SQLite only returns one last generated key...
                (autoGeneratedKeys[0][firstAutoIncColumn] as? Number)?.toLong()?.let {
                    var id = it

                    while (autoGeneratedKeys.size < inserted) {
                        id -= 1
                        autoGeneratedKeys.add(0, hashMapOf(firstAutoIncColumn to id))
                    }
                }
            }

            /** FIXME: https://github.com/JetBrains/Exposed/issues/129
             *  doesn't work with MySQL `INSERT ... ON DUPLICATE UPDATE`
             */
//            assert(isIgnore || autoGeneratedKeys.isEmpty() || autoGeneratedKeys.size == inserted) {
//                "Number of autoincs (${autoGeneratedKeys.size}) doesn't match number of batch entries ($inserted)"
//            }
        }

        arguments!!.forEachIndexed { itemIndx, pairs ->
            pairs.forEach { (col, value) ->
                if (!col.type.isAutoInc) {
                    val map = autoGeneratedKeys.getOrElse(itemIndx) {
                        hashMapOf<IModelField<*, *>, Any>().apply {
                            autoGeneratedKeys.add(itemIndx, this)
                        }
                    }
                    if (col.defaultValueFun.invoke(env) != null && value != null && data[itemIndx][col] == null) {
                        map[col] = value
                    }
                }
            }
        }
        return autoGeneratedKeys
    }
}
